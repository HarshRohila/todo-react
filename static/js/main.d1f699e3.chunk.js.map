{"version":3,"sources":["components/TodoItem.tsx","components/CompletedTodos.tsx","components/NotCompletedTodos.tsx","components/TodoForm.tsx","components/Info.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TodoItem","props","todo","onToggleTodo","onDelete","type","checked","isCompleted","onChange","className","style","display","text","onClick","CompletedTodos","todos","onUncheckTodo","onDeleteTodo","completedTodos","filter","map","id","NotCompletedTodos","onSortEnd","notCompletedTodos","MySortableList","useDragHandle","idx","SortableItem","index","component","DragHandle","SortableHandle","SortableElement","SortableContainer","children","TodoForm","onSubmit","handleSubmit","e","preventDefault","todoText","setTodoText","useState","value","placeholder","target","Info","href","App","setTodos","handleDelete","deletedTodo","handleToggle","toggledTodo","find","newTodo","uuidv4","oldIndex","newIndex","movedTodo","movedTodoIndex","findIndex","splice","deleteMovedTodo","newIndexOfMovedTodo","newIndexOfTodo","prevTodo","getNewIndexOfTodo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAGe,SAASA,EAASC,GAIhB,IACPC,EAAiCD,EAAjCC,KAAMC,EAA2BF,EAA3BE,aAAcC,EAAaH,EAAbG,SAE5B,OACE,qCACE,uBAAOC,KAAK,WAAWC,QAASJ,EAAKK,YAAaC,SAAU,kBAAML,EAAaD,MAC/E,mBAAGO,UAAU,YAAYC,MAAO,CAAEC,QAAS,UAA3C,SACGT,EAAKU,OAER,wBAAQH,UAAU,aAAaI,QAAS,kBAAMT,EAASF,IAAvD,kBCNC,IAAMY,EAAiB,SAAC,GAAiE,IAA/DC,EAA8D,EAA9DA,MAAOC,EAAuD,EAAvDA,cAAeC,EAAwC,EAAxCA,aAC/CC,EAAiBH,EAAMI,QAAO,SAACjB,GAAD,OAAUA,EAAKK,eAEnD,OACE,6BACGW,EAAeE,KAAI,SAAClB,GAAD,OAClB,oBAAkBO,UAAU,iBAA5B,SACE,cAACT,EAAD,CACEE,KAAMA,EACNC,aAAc,kBAAMa,EAAcd,IAClCE,SAAU,SAACF,GAAD,OAAUe,EAAaf,OAJ5BA,EAAKmB,U,OCATC,EAAoB,SAAC,GAA6D,IAA3DP,EAA0D,EAA1DA,MAAOX,EAAmD,EAAnDA,SAAUD,EAAyC,EAAzCA,aAAcoB,EAA2B,EAA3BA,UAC3DC,EAAoBT,EAAMI,QAAO,SAACjB,GAAD,OAAWA,EAAKK,eAEvD,OACE,mCACE,cAACkB,EAAD,CAAgBF,UAAWA,EAAWG,eAAa,EAAnD,SACGF,EAAkBJ,KAAI,SAAClB,EAAMyB,GAAP,OACrB,cAACC,EAAD,CACEC,MAAOF,EAEPG,UAAW,cAAC9B,EAAD,CAAUE,KAAMA,EAAMC,aAAcA,EAAcC,SAAUA,KADlEF,EAAKmB,YAehBU,EAAaC,aAAe,kBAAM,sBAAMvB,UAAU,SAAhB,mBAElCmB,EAAeK,aAAgB,gBAAGH,EAAH,EAAGA,UAAH,OACnC,qBAAIrB,UAAU,gBAAd,UACE,cAACsB,EAAD,IACCD,QAICL,EAAiBS,aAAkB,YAAgD,IAA7CC,EAA4C,EAA5CA,SAC1C,OAAO,6BAAKA,O,QC7CC,SAASC,EAAT,GAA6D,IAAzCC,EAAwC,EAAxCA,SAC3BC,EAAe,SAACC,GAGpB,GAFAA,EAAEC,iBAEEC,EAAU,CACZ,IAAM7B,EAAO6B,EACbC,EAAY,IACZL,EAASzB,KAP4D,EAWzC+B,mBAAS,IAXgC,mBAWlEF,EAXkE,KAWxDC,EAXwD,KAazE,OACE,uBAAML,SAAU,SAACE,GAAD,OAAOD,EAAaC,IAApC,UACE,uBACElC,KAAK,OACLuC,MAAOH,EACPI,YAAY,aACZrC,SAAU,gBAAGsC,EAAH,EAAGA,OAAH,OAAgBJ,EAAYI,EAAOF,UAE/C,wBAAQvC,KAAK,SAAb,yBCxBC,IAAM0C,EAAO,WAClB,OACE,sBAAKtC,UAAU,WAAf,UACE,mBAAGuC,KAAK,4CAAR,oBACA,0CACA,+BACE,0CACA,yEACA,wEACA,2DACA,2FCsEOC,MA1Ef,WAAgB,IAAD,EACaN,mBAAiB,IAD9B,mBACN5B,EADM,KACCmC,EADD,KAYPC,EAAe,SAACC,GACpBF,EAASnC,EAAMI,QAAO,SAACjB,GAAD,OAAUA,EAAKmB,KAAO+B,EAAY/B,QAGpDgC,EAAe,SAACC,GACpB,IAAMpD,EAAOa,EAAMwC,MAAK,SAACrD,GAAD,OAAUA,EAAKmB,KAAOiC,EAAYjC,MAEtDnB,IACFA,EAAKK,aAAeL,EAAKK,YACzB2C,EAAS,YAAInC,MAmCjB,OACE,sBAAKN,UAAU,MAAf,UACE,sBAAKA,UAAU,OAAf,UACE,4CACA,cAAC2B,EAAD,CAAUC,SAzDK,SAACI,GACpB,IAAMe,EAAgB,CACpBjD,aAAa,EACbK,KAAM6B,EACNpB,GAAIoC,eAENP,EAAS,CAACM,GAAF,mBAAczC,QAoDlB,cAAC,EAAD,CACEA,MAAOA,EACPX,SAAU+C,EACVhD,aAAckD,EACd9B,UAxCU,SAAC,GAAoE,IAAlEmC,EAAiE,EAAjEA,SAAUC,EAAuD,EAAvDA,SACvBnC,EAAoBT,EAAMI,QAAO,SAACjB,GAAD,OAAWA,EAAKK,eAEjDqD,EAAYpC,EAAkBkC,IAEZ,WACtB,IAAIG,EAAiB9C,EAAM+C,WAAU,SAAC5D,GAAD,OAAUA,EAAKmB,KAAOuC,EAAUvC,MACrEN,EAAMgD,OAAOF,EAAgB,GAC7BrC,EAAkBuC,OAAOL,EAAU,GAerCM,GACA,IAAMC,EAboB,WACxB,IAAIC,EAAiB,EAEjBC,EAAW3C,EAAkBmC,EAAW,GACxCQ,IAEFD,EADoBnD,EAAM+C,WAAU,SAAC5D,GAAD,OAAUA,EAAKmB,KAAO8C,EAAS9C,MAClC,GAGnC,OAAO6C,EAImBE,GAE5BrD,EAAMgD,OAAOE,EAAqB,EAAGL,GAErCV,EAAS,YAAInC,OAcT,cAAC,EAAD,CAAgBA,MAAOA,EAAOC,cAAeqC,EAAcpC,aAAckC,OAE3E,cAAC,EAAD,QC/DSkB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d1f699e3.chunk.js","sourcesContent":["import React from 'react'\nimport { Todo } from './NotCompletedTodos'\n\nexport default function TodoItem(props: {\n  todo: Todo\n  onToggleTodo: (todo: Todo) => void\n  onDelete: (todo: Todo) => void\n}): JSX.Element {\n  const { todo, onToggleTodo, onDelete } = props\n\n  return (\n    <>\n      <input type=\"checkbox\" checked={todo.isCompleted} onChange={() => onToggleTodo(todo)} />\n      <p className=\"todo-text\" style={{ display: 'inline' }}>\n        {todo.text}\n      </p>\n      <button className=\"delete-btn\" onClick={() => onDelete(todo)}>\n        X\n      </button>\n    </>\n  )\n}\n","import React from 'react'\nimport { Todo } from './NotCompletedTodos'\nimport TodoItem from './TodoItem'\n\ntype CompletedTodosProps = {\n  todos: Todo[]\n  onUncheckTodo: (todo: Todo) => void\n  onDeleteTodo: (todo: Todo) => void\n}\n\nexport const CompletedTodos = ({ todos, onUncheckTodo, onDeleteTodo }: CompletedTodosProps) => {\n  const completedTodos = todos.filter((todo) => todo.isCompleted)\n\n  return (\n    <ul>\n      {completedTodos.map((todo) => (\n        <li key={todo.id} className=\"completed-todo\">\n          <TodoItem\n            todo={todo}\n            onToggleTodo={() => onUncheckTodo(todo)}\n            onDelete={(todo) => onDeleteTodo(todo)}\n          />\n        </li>\n      ))}\n    </ul>\n  )\n}\n","import React from 'react'\nimport {\n  SortableContainer,\n  SortableElement,\n  SortableHandle,\n  SortEndHandler,\n} from 'react-sortable-hoc'\nimport TodoItem from './TodoItem'\n\ntype ListProps = {\n  todos: Todo[]\n  onDelete: (todo: Todo) => void\n  onToggleTodo: (todo: Todo) => void\n  onSortEnd?: SortEndHandler\n}\n\nexport const NotCompletedTodos = ({ todos, onDelete, onToggleTodo, onSortEnd }: ListProps) => {\n  const notCompletedTodos = todos.filter((todo) => !todo.isCompleted)\n\n  return (\n    <>\n      <MySortableList onSortEnd={onSortEnd} useDragHandle>\n        {notCompletedTodos.map((todo, idx) => (\n          <SortableItem\n            index={idx}\n            key={todo.id}\n            component={<TodoItem todo={todo} onToggleTodo={onToggleTodo} onDelete={onDelete} />}\n          />\n        ))}\n      </MySortableList>\n    </>\n  )\n}\n\nexport interface Todo {\n  isCompleted: boolean\n  text: string\n  id: string\n}\n\nconst DragHandle = SortableHandle(() => <span className=\"handle\">::</span>)\n\nconst SortableItem = SortableElement(({ component }: { component: JSX.Element }) => (\n  <li className=\"sortable-item\">\n    <DragHandle />\n    {component}\n  </li>\n))\n\nconst MySortableList = SortableContainer(({ children }: { children: JSX.Element[] }) => {\n  return <ul>{children}</ul>\n})\n","import React, { FormEvent, useState } from 'react'\n\ninterface TodoFormProps {\n  onSubmit: (todoText: string) => void\n}\nexport default function TodoForm({ onSubmit }: TodoFormProps): JSX.Element {\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault()\n\n    if (todoText) {\n      const text = todoText\n      setTodoText('')\n      onSubmit(text)\n    }\n  }\n\n  const [todoText, setTodoText] = useState('')\n\n  return (\n    <form onSubmit={(e) => handleSubmit(e)}>\n      <input\n        type=\"text\"\n        value={todoText}\n        placeholder=\"Enter Todo\"\n        onChange={({ target }) => setTodoText(target.value)}\n      ></input>\n      <button type=\"submit\">Add Todo</button>\n    </form>\n  )\n}\n","import React from 'react'\n\nexport const Info = () => {\n  return (\n    <div className=\"features\">\n      <a href=\"https://github.com/HarshRohila/todo-react\">Github</a>\n      <h1>Features</h1>\n      <ul>\n        <li>Add todo</li>\n        <li>Checkbox to toggle if todo is completed</li>\n        <li>Completed todo shift to bottom of list</li>\n        <li>X button to delete a todo</li>\n        <li>Not completed todos can be rearranged using handle</li>\n      </ul>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport './App.css'\nimport { CompletedTodos } from './components/CompletedTodos'\nimport { NotCompletedTodos, Todo } from './components/NotCompletedTodos'\nimport { v4 as uuidv4 } from 'uuid'\nimport TodoForm from './components/TodoForm'\nimport { Info } from './components/Info'\n\nfunction App() {\n  const [todos, setTodos] = useState<Todo[]>([])\n\n  const handleSubmit = (todoText: string) => {\n    const newTodo: Todo = {\n      isCompleted: false,\n      text: todoText,\n      id: uuidv4(),\n    }\n    setTodos([newTodo, ...todos])\n  }\n\n  const handleDelete = (deletedTodo: Todo) => {\n    setTodos(todos.filter((todo) => todo.id !== deletedTodo.id))\n  }\n\n  const handleToggle = (toggledTodo: Todo) => {\n    const todo = todos.find((todo) => todo.id === toggledTodo.id)\n\n    if (todo) {\n      todo.isCompleted = !todo.isCompleted\n      setTodos([...todos])\n    }\n  }\n\n  const onSortEnd = ({ oldIndex, newIndex }: { oldIndex: number; newIndex: number }) => {\n    const notCompletedTodos = todos.filter((todo) => !todo.isCompleted)\n\n    const movedTodo = notCompletedTodos[oldIndex]\n\n    const deleteMovedTodo = () => {\n      let movedTodoIndex = todos.findIndex((todo) => todo.id === movedTodo.id)\n      todos.splice(movedTodoIndex, 1)\n      notCompletedTodos.splice(oldIndex, 1)\n    }\n\n    const getNewIndexOfTodo = () => {\n      let newIndexOfTodo = 0\n\n      let prevTodo = notCompletedTodos[newIndex - 1]\n      if (prevTodo) {\n        let prevTodoIndex = todos.findIndex((todo) => todo.id === prevTodo.id)\n        newIndexOfTodo = prevTodoIndex + 1\n      }\n\n      return newIndexOfTodo\n    }\n\n    deleteMovedTodo()\n    const newIndexOfMovedTodo = getNewIndexOfTodo()\n\n    todos.splice(newIndexOfMovedTodo, 0, movedTodo)\n\n    setTodos([...todos])\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"main\">\n        <h1>To-Do List</h1>\n        <TodoForm onSubmit={handleSubmit} />\n        <NotCompletedTodos\n          todos={todos}\n          onDelete={handleDelete}\n          onToggleTodo={handleToggle}\n          onSortEnd={onSortEnd}\n        ></NotCompletedTodos>\n        <CompletedTodos todos={todos} onUncheckTodo={handleToggle} onDeleteTodo={handleDelete} />\n      </div>\n      <Info />\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}